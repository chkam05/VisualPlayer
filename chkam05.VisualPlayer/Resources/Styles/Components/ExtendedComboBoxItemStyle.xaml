<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:components="clr-namespace:chkam05.VisualPlayer.Components">
    
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="2"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <CornerRadius x:Key="ExtendedComboBoxItem.CornerRadius">4</CornerRadius>
    
    <Style x:Key="ExtendedComboBoxItemStyle" TargetType="{x:Type components:ExtendedComboBoxItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Margin" Value="0,1"/>
        <Setter Property="Padding" Value="4,2"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type components:ExtendedComboBoxItem}">
                    
                    <Border
                        x:Name="Bd"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{StaticResource ExtendedComboBoxItem.CornerRadius}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="true">
                        
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            TextBlock.Foreground="{TemplateBinding Foreground}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>

                    <ControlTemplate.Triggers>

                        <!-- Is Disabled. -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Bd" Value="0.56"/>
                        </Trigger>

                        <!-- Is Mouse Over. -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding HoveredBackground, RelativeSource={RelativeSource AncestorType={x:Type components:ExtendedComboBoxItem}}}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding HoveredBorder, RelativeSource={RelativeSource AncestorType={x:Type components:ExtendedComboBoxItem}}}"/>
                        </MultiTrigger>
                        
                        <!-- Is Selected & Focused. -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding HoveredBackground, RelativeSource={RelativeSource AncestorType={x:Type components:ExtendedComboBoxItem}}}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding HoveredBorder, RelativeSource={RelativeSource AncestorType={x:Type components:ExtendedComboBoxItem}}}"/>
                        </MultiTrigger>
                        
                        <!-- Is Selected & Mouse Over.-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding HoveredBackground, RelativeSource={RelativeSource AncestorType={x:Type components:ExtendedComboBoxItem}}}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding HoveredBorder, RelativeSource={RelativeSource AncestorType={x:Type components:ExtendedComboBoxItem}}}"/>
                        </MultiTrigger>
                        
                        <!-- Is Selected. -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding SelectedBackground, RelativeSource={RelativeSource AncestorType={x:Type components:ExtendedComboBoxItem}}}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding SelectedBorder, RelativeSource={RelativeSource AncestorType={x:Type components:ExtendedComboBoxItem}}}"/>
                        </MultiTrigger>
                        
                        <!-- Is Focused. -->
                        <!--MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger-->
                        
                        <!-- Is Focused & Mouse Over. -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding HoveredBackground, RelativeSource={RelativeSource AncestorType={x:Type components:ExtendedComboBoxItem}}}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding HoveredBorder, RelativeSource={RelativeSource AncestorType={x:Type components:ExtendedComboBoxItem}}}"/>
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>