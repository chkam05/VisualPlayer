<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:cfg="clr-namespace:VisualPlayer.Data.Configuration"
    xmlns:ctrls="clr-namespace:VisualPlayer.Controls"
    xmlns:enums="clr-namespace:VisualPlayer.Data.Enums"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <!-- STATIC -->

    <x:Static x:Key="ConfigMgr" Member="cfg:ConfigurationManager.Instance"/>
    <RelativeSource x:Key="CustomTreeViewItem.Source" AncestorType="{x:Type ctrls:CustomTreeViewItem}"/>
    <sys:Double x:Key="CustomTreeViewItem.ToggleButton.Size">16</sys:Double>


    <!-- RELATED STYLES -->

    <Style x:Key="CustomTreeViewItem.FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="CustomTreeViewItem.ToggleButton.ControlTemplate" TargetType="{x:Type ToggleButton}">
        <Border
            Background="Transparent"
            BorderBrush="{x:Null}"
            BorderThickness="0">

            <materialDesign:PackIcon
                x:Name="ExpandPath"
                Foreground="{TemplateBinding Foreground}"
                Kind="KeyboardArrowDown"
                Margin="{TemplateBinding Padding}"/>

        </Border>
        <ControlTemplate.Triggers>

            <!-- Is Checked -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Kind" TargetName="ExpandPath" Value="KeyboardArrowUp"/>
            </Trigger>

            <!-- Is Mouse Over -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" TargetName="ExpandPath" Value="{Binding ForegroundMouseOver, RelativeSource={StaticResource CustomTreeViewItem.Source}}"/>
            </Trigger>

            <!-- Is Mouse Over & Is Checked -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" TargetName="ExpandPath" Value="{Binding ForegroundMouseOver, RelativeSource={StaticResource CustomTreeViewItem.Source}}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="CustomTreeViewItem.ToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={StaticResource CustomTreeViewItem.Source}}"/>
        <Setter Property="Height" Value="{StaticResource CustomTreeViewItem.ToggleButton.Size}"/>
        <Setter Property="Template" Value="{StaticResource CustomTreeViewItem.ToggleButton.ControlTemplate}"/>
        <Setter Property="Width" Value="{StaticResource CustomTreeViewItem.ToggleButton.Size}"/>
    </Style>


    <!-- CONTROL TEMPLATE -->

    <ControlTemplate x:Key="CustomTreeViewItem.ControlTemplate" TargetType="{x:Type ctrls:CustomTreeViewItem}">
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="{StaticResource CustomTreeViewItem.ToggleButton.Size}" Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <ToggleButton
                x:Name="Expander"
                ClickMode="Press"
                Grid.Column="0"
                Grid.Row="0"
                IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource CustomTreeViewItem.ToggleButtonStyle}"
                VerticalAlignment="Center"/>

            <Border
                x:Name="Bd"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding CornerRadius}"
                Grid.Column="1"
                Grid.Row="0"
                Padding="{TemplateBinding Padding}"
                SnapsToDevicePixels="True">

                <ContentPresenter
                    x:Name="PART_Header"
                    ContentSource="Header"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    TextBlock.Foreground="{TemplateBinding Foreground}"
                    VerticalAlignment="Center"/>

            </Border>

            <ItemsPresenter
                x:Name="ItemsHost"
                Grid.ColumnSpan="2"
                Grid.Column="1"
                Grid.Row="1"/>

        </Grid>
        <ControlTemplate.Triggers>

            <!-- Is Expanded -->
            <Trigger Property="IsExpanded" Value="false">
                <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
            </Trigger>

            <!-- Has Items -->
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
            </Trigger>

            <!-- Is Mouse Over -->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" TargetName="Bd" Value="{Binding BackgroundMouseOver, RelativeSource={StaticResource CustomTreeViewItem.Source}}"/>
                <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding BorderBrushMouseOver, RelativeSource={StaticResource CustomTreeViewItem.Source}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="PART_Header" Value="{Binding ForegroundMouseOver, RelativeSource={StaticResource CustomTreeViewItem.Source}}"/>
            </Trigger>

            <!-- Is Selected -->
            <Trigger Property="IsSelected" Value="true">
                <Setter Property="Background" TargetName="Bd" Value="{Binding BackgroundSelected, RelativeSource={StaticResource CustomTreeViewItem.Source}}"/>
                <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding BorderBrushSelected, RelativeSource={StaticResource CustomTreeViewItem.Source}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="PART_Header" Value="{Binding ForegroundSelected, RelativeSource={StaticResource CustomTreeViewItem.Source}}"/>
            </Trigger>

            <!-- Is Selected and Selection Active -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="Bd" Value="{Binding Background, RelativeSource={StaticResource CustomTreeViewItem.Source}}"/>
                <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding BorderBrushSelected, RelativeSource={StaticResource CustomTreeViewItem.Source}}"/>
                <Setter Property="TextBlock.Foreground" TargetName="PART_Header" Value="{Binding Foreground, RelativeSource={StaticResource CustomTreeViewItem.Source}}"/>
            </MultiTrigger>

            <!-- Is Disabled -->
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.56"/>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>
    

    <!-- STYLE -->

    <Style x:Key="CustomTreeViewItemStyle" TargetType="{x:Type ctrls:CustomTreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BackgroundMouseOver" Value="{Binding Appearance.AccentMouseOverBrush, Mode=OneWay, Source={StaticResource ConfigMgr}}"/>
        <Setter Property="BackgroundSelected" Value="{Binding Appearance.AccentSelectedBrush, Mode=OneWay, Source={StaticResource ConfigMgr}}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding Appearance.AccentColorBrush, Mode=OneWay, Source={StaticResource ConfigMgr}}"/>
        <Setter Property="BorderBrushSelected" Value="{Binding Appearance.AccentColorBrush, Mode=OneWay, Source={StaticResource ConfigMgr}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource CustomTreeViewItem.FocusVisual}"/>
        <Setter Property="Foreground" Value="{Binding Appearance.ThemeForegroundBrush, Mode=OneWay, Source={StaticResource ConfigMgr}}"/>
        <Setter Property="ForegroundMouseOver" Value="{Binding Appearance.AccentForegroundBrush, Mode=OneWay, Source={StaticResource ConfigMgr}}"/>
        <Setter Property="ForegroundSelected" Value="{Binding Appearance.AccentForegroundBrush, Mode=OneWay, Source={StaticResource ConfigMgr}}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="4,0"/>
        <Setter Property="Template" Value="{StaticResource CustomTreeViewItem.ControlTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>

        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>